@model WebOptimus.Models.ViewModel.DonorVM
@{
    ViewData["Title"] = "Donation";
    Layout = "~/Views/Shared/_cLayout.cshtml";
}

<section class="content py-5">
    <div class="container">
        @if (@ViewBag.IsCause == "true")
        {
            <div class="row justify-content-center">
                <div class="col-12 text-center mb-4">
                    <h1 class="display-5 text-primary">Complete Your Donation</h1>
                    <p class="lead text-primary fw-bold" style="font-size: 1.25rem;">
                        Please select the names for which you wish to make a payment and proceed.
                    </p>
                </div>

                <div class="col-md-4 mb-4">
                    <div class="card shadow-sm bg-light rounded">
                        <div class="card-header text-center bg-primary text-white">
                            <h4>Donation Details</h4>
                        </div>
                        <div class="card-body">
                            <h6><strong>Adult Minimum Payment:</strong> <h3>£@(Model.Cas?.FullMemberAmount ?? 0)</h3></h6>
                            <h6><strong>Under @(Model.Cas?.UnderAge ?? 25) Payment:</strong> <h3>£@(Model.Cas?.UnderAgeAmount ?? 0)</h3></h6>

                            <hr>
                            <h4>Your Family/Group</h4>
                            <h6><strong>Number of Adults:</strong> <h3>@ViewBag.Adult</h3></h6>
                            <h6><strong>Number of Children:</strong> <h3>@ViewBag.Children</h3></h6>
                            <hr>
                            <p><strong class="text-danger">Missed payment fee (per person):</strong> <h3 class="text-danger">£@Model.MissedPaymentFees</h3></p>
                            @*  <p><strong>Total Minimum Payment:</strong> <h3 class="text-success">£@ViewBag.Total</h3></p> *@
                        </div>
                    </div>
                </div>

                <div class="col-md-8">
                    <div class="card shadow-sm p-4 bg-white rounded">
                        <h4 class="text-center text-primary mb-4">Donation Form</h4>
                        <form method="post" asp-action="PaymentProcess" asp-controller="Other" id="donationForm">
                            <input type="hidden" asp-for="CauseCampaignpRef" value="@Model.Cas.CauseCampaignpRef" />

                            <!-- Dependents Section -->
                            <div class="mb-4">
                                <h5 class="text-secondary">Your Family</h5>
                                <div class="form-group">
                                    @for (int i = 0; i < Model.DependentsChecklist.Count; i++)
                                    {
                                        <div class="card mb-3 p-3">
                                            <div class="form-check d-flex align-items-center">
                                                <input type="checkbox"
                                                       class="form-check-input dependent-checkbox"
                                                       id="dependent-@Model.DependentsChecklist[i].PersonRegNumber"
                                                       name="DependentsChecklist[@i].IsSelected"
                                                       value="true" />
                                                <input type="hidden" name="DependentsChecklist[@i].IsSelected" value="false" />
                                                <input type="hidden" name="DependentsChecklist[@i].PersonRegNumber" value="@Model.DependentsChecklist[i].PersonRegNumber" />
                                                <input type="hidden" name="DependentsChecklist[@i].Price" value="@Model.DependentsChecklist[i].Price" />

                                                <label class="form-check-label fw-bold me-auto" for="dependent-@Model.DependentsChecklist[i].PersonRegNumber">
                                                    @Model.DependentsChecklist[i].Name
                                                    @if (Model.DependentsChecklist[i].Paid)
                                                    {
                                                        <span class="badge bg-success ms-2">Paid</span>
                                                    }
                                                    <span class="badge bg-secondary ms-2">£@Model.DependentsChecklist[i].Price</span>
                                                    @if (Model.DependentsChecklist[i].IsExempt)
                                                    {
                                                        <span class="badge bg-warning ms-2">Exempt from Payment</span>
                                                    }
                                                    else if (!Model.DependentsChecklist[i].Paid && Model.DependentsChecklist[i].Price > 0)
                                                    {
                                                        <span class="badge bg-danger ms-2 missed-payment">
                                                            Missed Payment: £@Model.MissedPaymentFees
                                                        </span>

                                                        @if (Model.DependentsChecklist[i].MissedPayment < Model.MissedPaymentFees)
                                                        {
                                                            <span class="badge bg-info ms-2">
                                                                Reduced to: £@Model.DependentsChecklist[i].MissedPayment
                                                            </span>
                                                        }
                                                    }
                                                </label>
                                                <div class="ms-3">
                                                    <input type="number"
                                                           class="form-control custom-amount"
                                                           name="DependentsChecklist[@i].CustomAmount"
                                                           min="@(Model.DependentsChecklist[i].Price)"
                                                           value="@(Model.DependentsChecklist[i].Price + Model.DependentsChecklist[i].MissedPayment)"
                                                           placeholder="Custom Amount (£)" />

                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>

                            <!-- Group Members Section -->
                            <div class="mb-4">
                                @if (Model.GroupMembers.Count > 0)
                                {
                                    <h5 class="text-secondary">Your Group Member(s)</h5>
                                    <div class="form-group">
                                        @for (int i = 0; i < Model.GroupMembers.Count; i++)
                                        {
                                            <div class="card mb-3 p-3">
                                                <div class="form-check d-flex align-items-center">
                                                    <input type="checkbox"
                                                           class="form-check-input group-checkbox"
                                                           id="group-@Model.GroupMembers[i].PersonRegNumber"
                                                           name="GroupMembers[@i].IsSelected"
                                                           value="true" />
                                                    <input type="hidden" name="GroupMembers[@i].IsSelected" value="false" />
                                                    <input type="hidden" name="GroupMembers[@i].PersonRegNumber" value="@Model.GroupMembers[i].PersonRegNumber" />
                                                    <input type="hidden" name="GroupMembers[@i].Price" value="@Model.GroupMembers[i].Price" />

                                                    <label class="form-check-label fw-bold me-auto" for="group-@Model.GroupMembers[i].PersonRegNumber">
                                                        @Model.GroupMembers[i].Name
                                                        @if (Model.GroupMembers[i].Paid)
                                                        {
                                                            <span class="badge bg-success ms-2">Paid</span>
                                                        }
                                                        <span class="badge bg-secondary ms-2">£@Model.GroupMembers[i].Price</span>
                                                        @if (Model.GroupMembers[i].IsExempt)
                                                        {
                                                            <span class="badge bg-warning ms-2">Exempt from Payment</span>
                                                        }
                                                        else if (!Model.GroupMembers[i].Paid && Model.GroupMembers[i].Price > 0)
                                                        {
                                                            <span class="badge bg-danger ms-2 missed-payment">
                                                                Missed Payment: £@Model.MissedPaymentFees
                                                            </span>

                                                            @if (Model.GroupMembers[i].MissedPayment < Model.MissedPaymentFees)
                                                            {
                                                                <span class="badge bg-info ms-2">
                                                                    Reduced to: £@Model.GroupMembers[i].MissedPayment
                                                                </span>
                                                            }
                                                        }
                                                    </label>

                                                    <div class="ms-3">
                                                        <input type="number"
                                                               class="form-control custom-amount"
                                                               name="GroupMembers[@i].CustomAmount"
                                                               min="@(Model.GroupMembers[i].Price)"
                                                               value="@(Model.GroupMembers[i].Price + Model.GroupMembers[i].MissedPayment)"
                                                               placeholder="Custom Amount (£)" />

                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                }
                            </div>

                            <!-- Donation Amount Section -->
                            <div class="mb-4 d-none">
                                <h5 class="text-secondary">Donation Amount:</h5>
                                <div class="form-group">
                                    <label for="amount" class="form-label">Total Amount (£):</label>
                                    <input type="text" class="form-control" asp-for="Amount" id="amount" />
                                    <span asp-validation-for="Amount" class="text-danger" id="amountError"></span>
                                </div>
                            </div>

                            <!-- Payment Summary -->
                            <div class="mb-4">
                                <h5 class="text-secondary">Payment Summary:</h5>
                                <div class="form-group d-none">
                                    <label for="transactionFee" class="form-label">Transaction Fee (Stripe) (£):</label>
                                    <input type="text" class="form-control" id="transactionFee" readonly />
                                    <input type="hidden" asp-for="TransactionFees" id="hiddenTransactionFee" />
                                </div>
                                <div class="form-group">
                                    <label for="total" class="form-label">Total Payment (£):</label>
                                    <input type="text" class="form-control" id="total" readonly />
                                    <input type="hidden" asp-for="TotalAmount" id="hiddenTotalAmount" />
                                </div>
                            </div>

                            <!-- Donor Information Section -->
                            <div class="bg-light p-3 mb-4 rounded">
                                <h5 class="text-secondary">Donor Information</h5>
                                <div class="form-group mb-3">
                                    <label for="firstName" class="form-label">First Name:</label>
                                    <input type="text" class="form-control" asp-for="User.FirstName" />
                                    <span asp-validation-for="User.FirstName" class="text-danger"></span>
                                </div>
                                <div class="form-group mb-3">
                                    <label for="lastName" class="form-label">Last Name:</label>
                                    <input type="text" class="form-control" asp-for="User.Surname" />
                                    <span asp-validation-for="User.Surname" class="text-danger"></span>
                                </div>
                                <div class="form-group mb-3">
                                    <label for="email" class="form-label">Email Address:</label>
                                    <input type="email" class="form-control" asp-for="User.Email" />
                                    <span asp-validation-for="User.Email" class="text-danger"></span>
                                </div>
                                <div class="form-group">
                                    <label for="phone" class="form-label">Phone:</label>
                                    <input type="text" class="form-control" asp-for="User.PhoneNumber" />
                                    <span asp-validation-for="User.PhoneNumber" class="text-danger"></span>
                                </div>
                            </div>

                            <!-- Submit Button -->
                            <div class="text-center">
                                <button type="submit" class="btn btn-primary btn-lg px-5">Proceed To Payment</button>
                            </div>
                        </form>
                    </div>
                </div>

                </div>
        }
        else
        {
                <div class="alert alert-warning text-center">
                    <h2 class="text-warning">Cause Not Found</h2>
                    <p>Please contact the administrator for assistance.</p>
                </div>
        }
    </div>
</section>

@section scripts {
        <partial name="_ValidationScriptsPartial" />
        <script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.10.3/jquery-ui.min.js"></script>

        <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.12.1/css/jquery.dataTables.min.css">
        <script type="text/javascript" charset="utf8" src="https://cdn.datatables.net/1.12.1/js/jquery.dataTables.min.js "></script>

        <script src="~/admin/js/table.js" asp-append-version="true"></script>

        <style>
            .invalid-amount {
                border-color: red;
            }
        </style>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const form = document.getElementById('donationForm');
            const allCheckboxes = document.querySelectorAll('.dependent-checkbox, .group-checkbox');
            const allCustomAmountInputs = document.querySelectorAll('.custom-amount');
            const amountInput = document.getElementById('amount');
            const totalInput = document.getElementById('total');
            const hiddenTotalAmount = document.getElementById('hiddenTotalAmount');

            /**
             * Ensure each checked custom amount is at least (Price + Missed Payment).
             */
            function validateCustomAmounts() {
                let hasInvalidAmount = false;

                document.querySelectorAll('.dependent-checkbox:checked, .group-checkbox:checked').forEach((checkbox) => {
                    const formRow = checkbox.closest('.form-check');
                    const customAmountInput = formRow.querySelector('.custom-amount');
                    const minAmountField = formRow.querySelector('.initial-amount');
                    const minAllowedValue = parseFloat(minAmountField?.value) || 0;
                    let customAmount = parseFloat(customAmountInput.value) || 0;

                    if (customAmount < minAllowedValue) {
                        hasInvalidAmount = true;
                        customAmountInput.classList.add('invalid-amount'); // Add red border
                    } else {
                        customAmountInput.classList.remove('invalid-amount'); // Remove red border if valid
                    }
                });

                return hasInvalidAmount;
            }

            /**
             * Calculate the total donation amount for checked items only.
             */
            function calculateTotal() {
                let total = 0;

                document.querySelectorAll('.dependent-checkbox:checked, .group-checkbox:checked').forEach((checkbox) => {
                    const formRow = checkbox.closest('.form-check');
                    const customAmountInput = formRow.querySelector('.custom-amount');
                    let customAmount = parseFloat(customAmountInput.value) || 0;
                    total += customAmount;
                });

                return parseFloat(total.toFixed(2));
            }

            /**
             * Update the total payment amount (Excluding Transaction Fees).
             */
            function updateTotalAmount() {
                const totalAmount = calculateTotal();

                totalInput.value = totalAmount.toFixed(2);
                hiddenTotalAmount.value = totalAmount.toFixed(2);
            }

            /**
             * Ensure checkboxes sync with hidden inputs.
             */
            function syncIsSelected(checkbox) {
                const hiddenInput = checkbox.closest('.form-check').querySelector('input[type="hidden"][name*="IsSelected"]');
                if (hiddenInput) {
                    hiddenInput.value = checkbox.checked ? "true" : "false";
                }
            }

            /**
             * Initialize the custom amount field to (Price + Missed Payment) and store it in a hidden field.
             */
                     function initializeCustomAmounts() {
        document.querySelectorAll('.custom-amount').forEach((input) => {
            const formRow = input.closest('.form-check');

            const missedPaymentFeeElement = formRow.querySelector('.missed-payment');
            const reducedPaymentElement = formRow.querySelector('.bg-info');

            //  Grab base price from hidden input (not from input.value)
            const priceField = formRow.querySelector('input[name*=".Price"]');
            let basePrice = parseFloat(priceField?.value) || 0;

            let missedPaymentFee = 0;
            let reducedMissedPayment = 0;

            if (missedPaymentFeeElement) {
                const feeText = missedPaymentFeeElement.innerText.match(/[\d.]+/);
                missedPaymentFee = feeText ? parseFloat(feeText[0]) : 0;
            }

            if (reducedPaymentElement) {
                const reducedText = reducedPaymentElement.innerText.match(/[\d.]+/);
                reducedMissedPayment = reducedText ? parseFloat(reducedText[0]) : 0;
            }

            let defaultAmount = basePrice;
           // Logic fix: treat zero as valid reduction
            if (reducedPaymentElement !== null) {
                defaultAmount += reducedMissedPayment;
            } else if (missedPaymentFee > 0) {
                defaultAmount += missedPaymentFee;
            }


            let hiddenField = formRow.querySelector('.initial-amount');
            if (!hiddenField) {
                hiddenField = document.createElement('input');
                hiddenField.type = 'hidden';
                hiddenField.classList.add('initial-amount');
                formRow.appendChild(hiddenField);
            }
            hiddenField.value = defaultAmount.toFixed(2);

            //  Only auto-fill if empty or zero
            const currentVal = parseFloat(input.value) || 0;
            if (currentVal === 0) {
                input.value = defaultAmount.toFixed(2);
            }
        });
    }


            /**
             * Handle changes in checkboxes for dependents and group members.
             */
            allCheckboxes.forEach((checkbox) => {
                checkbox.addEventListener('change', function () {
                    syncIsSelected(checkbox);
                    updateAmount();
                });
            });

            /**
             * Handle changes in custom amount inputs.
             */
            allCustomAmountInputs.forEach((input) => {
                input.addEventListener('input', function () {
                    const enteredAmount = parseFloat(input.value) || 0;
                    const formRow = input.closest('.form-check');
                    const minAllowedValue = parseFloat(formRow.querySelector('.initial-amount')?.value) || 0;
                    const checkbox = formRow.querySelector('input[type="checkbox"]');

                    checkbox.checked = enteredAmount > 0;

                    if (checkbox.checked) {
                        if (enteredAmount < minAllowedValue) {
                            input.classList.add('invalid-amount'); // Add red border
                        } else {
                            input.classList.remove('invalid-amount');
                        }
                    }

                    syncIsSelected(checkbox);
                    updateAmount();
                });
            });

            /**
             * Update the total amount field.
             */
            function updateAmount() {
                const total = calculateTotal();
                amountInput.value = total.toFixed(2);
                updateTotalAmount();
            }

            /**
             * Validate form submission:
             * - At least one dependent or group member must be selected.
             * - Each checked custom amount must be at least (Price + Missed Payment).
             */
            form.addEventListener('submit', function (event) {
                let hasSelection = false;

                document.querySelectorAll('.dependent-checkbox:checked, .group-checkbox:checked').forEach(() => {
                    hasSelection = true;
                });

                if (!hasSelection) {
                    event.preventDefault();
                    alert("Please select at least one dependent or group member for payment.");
                    return;
                }

                if (validateCustomAmounts()) {
                    event.preventDefault();
                    alert("Some checked custom amounts are lower than the required minimum. Please adjust them before proceeding.");
                }
            });

            // Initialize values on page load
            initializeCustomAmounts();
            updateAmount();
        });
    </script>



}
